c
decoded = JWT.decode(token, Rails.application.secrets.secret_key_base)
token = header.split(' ').last
header = request.headers['Token']
request.headers['Token']
c
header = request.headers['Token']
c
@current_user_id
c
request.headers('Token')
request.headers('Token'0
request.headers
request.header
params
c
@current_user_id
@current_user
c
decoded = JWT.decode(token, Rails.application.secrets.secret_key_base)
token = header.split(' ').last
header
c
decoded[0]['user_id']
decoded[0]
decoded
decoded = JWT.decode(token, Rails.application.secrets.secret_key_base)
token = JWT.encode({ user_id: " 1"}, Rails.application.secrets.secret_key_base)
JWT.encode({ user_id: " 1"}, Rails.application.secrets.secret_key_base)
JWT.encode({ user_id:  }, Rails.application.secrets.secret_key_base)
decoded = JWT.decode(token, Rails.application.secrets.secret_key_base, true, algorithm: 'HS256')
Rails.application.secrets.secret_key_base
JWT.decode token, "sds", true, { algorithm: 'HS256' }
JWT.decode token, hmac_secret, true, { algorithm: 'HS256' }
JWT.decode Token, hmac_secret, true, { algorithm: 'HS256' }
decoded = JWT.decode(token)
decoded = JWT.decode(token,   algorithm: 'HS256')
decoded = JWT.decode(token,  true, algorithm: 'HS256')
decoded = JWT.decode(token, Rails.application.secrets.secret_key_base, true, algorithm: 'HS256')
token = header.split(' ').last
header
c
User
c
User
user = User.find_by(email: params[:email])
c
params
c
params
c
params
c
params
c
params
c
image
c
params
c
params
c
params[:images].class
params[:images]
params
c
params[:images].
params[:images}
params
c
params[:images].class
params[:images]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params[:images]
images
params
images
c
params
c
@url
@url << status['url']
@url
status['url']
status = Cloudinary::Uploader.upload(image)
c
status = Cloudinary::Uploader.upload(image)
Cloudinary::Uploader.upload(image)
image
c
params
c
img.class
img = Array.wrap(params[:images])
Array.wrap(params[:images])
c
img.first
img
img.type
img.class
img = params[:images]
i = params[:images]
params[:images].each
params[:images].class
params[:images]
params[:images][0]
params[:images]
params
c
params[:images]
params
c
params[:images]
params[:images].length
params[:images].size
params[:images].class
params[:images]
params
c
params[:images]
params[:image]
params[:image-0]
params
c
params
c
params
c
params
c
params
c
params
c
params[:images]
params[:images
params
c
Spot.new(spot_params)
@url
c
@review
c
@review.update!(body: "dsd")
@review.update!(review_params)
@review.update(review_params)
@review
c
review_params
params.permit(:body)
params[:body]
params
c
Spot.find(params[:id])
params[:id]
params[id]
params
c
params.permit(:title)
params.require(spot)
params
param
params
spot_params
params[spot]
params[spot
params
